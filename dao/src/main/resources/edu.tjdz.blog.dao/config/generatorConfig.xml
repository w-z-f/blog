<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!-- 引入 application.yml -->
    <!--<properties resource="application.yml"/>-->

    <!-- MyBatis3Simple：不生成 Example相关类及方法 ,Mybatis3复杂的 生产Example-->
    <!--MyBatis3模式默认生成的对象将包含很多"by Example"的方法，如果不想生成这些，可以在后续的table元素中配置取消；
    MyBatis3Simple模式默认每个表生成一个实体对象，生成的Mapper接口仅包含必须的5个方法：
    deleteByPrimaryKey、insert、selectByPrimaryKey、selectAll、updateByPrimaryKey。-->
    <context id="Mysql" targetRuntime="Mybatis3" defaultModelType="flat">

        <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>

       <!-- 覆盖生成XML文件
        <plugin type="org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin" />-->


<!--        &lt;!&ndash; 指定生成 Mapper 的继承模板 &ndash;&gt;
        <plugin type="tk.mybatis.mapper.generator.MapperPlugin">
            <property name="mappers" value="com.demo.utils.generator.TyMapper"/>
        </plugin>-->

        <!-- 生成 JavaBean 对象重写 toString方法 -->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>

        <!-- 生成 JavaBean 对象继承 Serializable 类 -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>

        <!-- 生成 JavaBean 对象重写 equals 和 hashCode 方法 -->
        <!-- <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin" /> -->

        <!-- jdbc 连接配置 -->
        <jdbcConnection driverClass="com.mysql.cj.jdbc.Driver"
                        connectionURL="jdbc:mysql://localhost:3306/blog?useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=UTF8&amp;allowPublicKeyRetrieval=true&amp;allowMultiQueries=true"
                        userId="root"
                        password="123456">
        </jdbcConnection>

        <!--非必须，类型处理器，在数据库类型和java类型之间的转换控制-->
        <!-- 默认情况下数据库中的 decimal，bigInt 在 Java 对应是 sql 下的 BigDecimal 类 -->
<!--        <javaTypeResolver type="com.demo.utils.generator.JavaTypeResolverImplUtil">
            <property name="forceBigDecimals" value="false"></property>
        </javaTypeResolver>-->

        <javaModelGenerator targetPackage="edu.tjdz.blog.beans" targetProject="src/main/java">
            <!-- 是否允许子包 -->
            <!--            <property name="enableSubPackages" value="false"/>-->
          <!--   是否对modal添加构造函数 -->
                        <property name="constructorBased" value="true"/>
            <!-- 是否清理从数据库中查询出的字符串左右两边的空白字符 -->
            <!--            <property name="trimStrings" value="true"/>-->
            <!-- 建立modal对象是否不可改变 即生成的modal对象不会有setter方法，只有构造方法 -->
            <!--            <property name="immutable" value="false"/>-->
        </javaModelGenerator>

        <sqlMapGenerator targetPackage="edu.tjdz.blog.dao" targetProject="src/main/resources"/>

        <javaClientGenerator targetPackage="edu.tjdz.blog.dao" targetProject="src/main/java" type="XMLMAPPER"/>


        <!-- Mysql 配置 -->
        <!-- <generatedKey column="id" sqlStatement="Mysql" identity="true" /> -->
        <!-- tableName：数据库表名，domainObjectName：生成文件名 ，schema：数据源-->
        <table tableName="users">
            <generatedKey column="user_id" sqlStatement="Mysql" identity="true"/>
        </table>

        <table tableName="blog">
            <generatedKey column="blog_id" sqlStatement="Mysql" identity="true"/>
        </table>

        <table tableName="type">
            <generatedKey column="type_id" sqlStatement="Mysql" identity="true"/>
        </table>

        <table tableName="tag">
            <generatedKey column="tag_id" sqlStatement="Mysql" identity="true"/>
        </table>

        <table tableName="article">
            <generatedKey column="article_id" sqlStatement="Mysql" identity="true"/>
        </table>

        <table tableName="sys_user">
            <generatedKey column="user_id" sqlStatement="Mysql" identity="true"/>
        </table>

        <table tableName="comment">
            <generatedKey column="comment_id" sqlStatement="Mysql" identity="true"/>
        </table>


        <!-- Oracle 配置 -->
        <!-- <generatedKey column="id" sqlStatement="select SEQ_{1}.nextval from dual" identity="false" type="pre"/> -->

    </context>
</generatorConfiguration>
